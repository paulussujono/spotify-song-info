{"version":3,"sources":["src/constants.ts","src/util/index.ts","src/ui/spotify-song-info/index.tsx","src/controllers/song-info/index.ts","src/ui/index.tsx","src/ui/spotify-auth/index.tsx","App.tsx"],"names":["APP_URL","TONES","SpotifySongInfo","value","accessToken","useState","Spotify","spotify","useEffect","setAccessToken","isLoading","setIsLoading","didError","setDidError","songInfo","setSongInfo","refreshData","useCallback","a","async","getMyCurrentPlayingTrack","track","trackItem","item","undefined","id","name","artists","album","artist","albumArtUrl","images","find","width","url","songMeta","getAudioAnalysisForTrack","songAnalysis","tempo","confidence","tempo_confidence","timeSignature","time_signature","time_signature_confidence","key","key_confidence","mode","mode_confidence","meta","analysis","XMLHttpRequest","status","window","location","replace","console","log","useSongInfo","h","w","isLoaded","source","uri","alt","fontSize","lineHeight","Math","round","toFixed","pitchClass","majorPitchClass","isMajor","pitchClassToMajor","major","minor","minorPitchClass","pitchClassToMinor","getTonalPitchClasses","onPress","AppMain","extendTheme","config","useSystemColorMode","initialColorMode","_dark","bg","_light","px","flex","space","alignItems","SpotifyAuth","encodeURIComponent","AppEntry","spotifyAccessToken","URLSearchParams","hash","substr","get"],"mappings":"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","file":"static/js/app.a1a13298.chunk.js","sourcesContent":["export const APP_URL = 'https://paulussujono.github.io/spotify-song-info/';\n","export const roundToNearestHalf = (value: number) => {\n  return (Math.round(value * 2) / 2).toFixed(1);\n};\n\nexport const TONES = [\n  'C',\n  'Db',\n  'D',\n  'Eb',\n  'E',\n  'F',\n  'F#',\n  'G',\n  'Ab',\n  'A',\n  'Bb',\n  'B',\n];\n\nconst pitchClassToMinor = (minorPitchClass: number) => {\n  return (minorPitchClass - 3 + 12) % 12;\n};\n\nconst pitchClassToMajor = (pitchClass: number, isMajor: boolean) => {\n  return isMajor ? pitchClass : (pitchClass + 3) % 12;\n};\n\nexport const getTonalPitchClasses = (pitchClass: number, mode: number) => {\n  const isMajor = mode === 1;\n  const majorPitchClass = pitchClassToMajor(pitchClass, isMajor);\n  const minorPitchClass = pitchClassToMinor(majorPitchClass);\n  return {\n    major: majorPitchClass,\n    minor: minorPitchClass,\n  };\n};\n","import React from 'react';\nimport { useSongInfo } from '../../controllers/song-info';\nimport { getTonalPitchClasses, roundToNearestHalf, TONES } from '../../util';\nimport { Skeleton, Text, Image, Button, Heading } from 'native-base';\n\nexport const SpotifySongInfo = ({ accessToken }: { accessToken: string }) => {\n  const { songInfo, isLoading, didError, refreshData } =\n    useSongInfo(accessToken);\n\n  return (\n    <>\n      <Skeleton h=\"40\" w=\"40\" isLoaded={!isLoading}>\n        {songInfo && (\n          <Image\n            key={songInfo.meta.albumArtUrl}\n            h=\"40\"\n            w=\"40\"\n            source={{\n              uri: songInfo.meta.albumArtUrl || 'TODO placeholder',\n            }}\n            alt={`Album artwork for ${songInfo.meta.name}`}\n          />\n        )}\n      </Skeleton>\n      <Skeleton h=\"34\" w=\"50\" isLoaded={!isLoading}>\n        {songInfo && (\n          <>\n            <Heading h=\"8\">{songInfo.meta.name}</Heading>\n            <Text h=\"10\" fontSize=\"md\" lineHeight={'20px'}>\n              {songInfo.meta.artist}\n            </Text>\n            <Text h=\"6\" fontSize=\"md\" lineHeight={'20px'}>\n              {`${roundToNearestHalf(songInfo.analysis.tempo.value)} bpm`}\n            </Text>\n            <Text h=\"10\" fontSize=\"md\" lineHeight={'20px'}>\n              {`${\n                TONES[\n                  getTonalPitchClasses(\n                    songInfo.analysis.key.value,\n                    songInfo.analysis.mode.value,\n                  ).major\n                ]\n              } Major`}\n            </Text>\n          </>\n        )}\n      </Skeleton>\n      <Button onPress={refreshData}>Refresh</Button>\n    </>\n  );\n};\n","import { useState, useEffect, useCallback } from 'react';\nimport Spotify from 'spotify-web-api-js';\nimport { APP_URL } from '../../constants';\nimport { SongMeta, SongAnalysis, SongInfo } from '../../types';\n\nexport const useSongInfo = (\n  accessToken: string,\n): {\n  songInfo: SongInfo | undefined;\n  isLoading: boolean;\n  didError: boolean;\n  refreshData: () => void;\n} => {\n  const [spotify] = useState(new Spotify());\n\n  useEffect(() => {\n    spotify.setAccessToken(accessToken);\n  }, [accessToken, spotify]);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [didError, setDidError] = useState(false);\n  const [songInfo, setSongInfo] = useState<SongInfo | undefined>();\n\n  const refreshData = useCallback(async () => {\n    setIsLoading(true);\n    setDidError(false);\n    try {\n      const track = await spotify.getMyCurrentPlayingTrack();\n\n      const trackItem = track?.item;\n      if (!trackItem) {\n        // no track is playing\n        setSongInfo(undefined);\n      } else {\n        const { id, name, artists, album } = trackItem;\n        const artist = artists[0]?.name;\n        const albumArtUrl = album.images.find(\n          ({ width }) => width === 300,\n        )?.url;\n        const songMeta: SongMeta = { id, name, artist, albumArtUrl };\n\n        const { track } = await spotify.getAudioAnalysisForTrack(songMeta.id);\n        const songAnalysis: SongAnalysis = {\n          tempo: { value: track.tempo, confidence: track.tempo_confidence },\n          timeSignature: {\n            value: track.time_signature,\n            confidence: track.time_signature_confidence,\n          },\n          key: { value: track.key, confidence: track.key_confidence },\n          mode: { value: track.mode, confidence: track.mode_confidence },\n        };\n        setSongInfo({ meta: songMeta, analysis: songAnalysis });\n      }\n      setDidError(false);\n    } catch (error) {\n      if (\n        error instanceof XMLHttpRequest &&\n        error.status === 401 /* unauthorised */\n      ) {\n        // TODO do a better redirect to auth\n        window.location.replace(APP_URL);\n      }\n      setSongInfo(undefined);\n      setDidError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [spotify]);\n\n  useEffect(() => {\n    refreshData();\n  }, [refreshData]);\n\n  console.log({\n    songInfo,\n    isLoading,\n    didError,\n    refreshData,\n  });\n\n  return {\n    songInfo,\n    isLoading,\n    didError,\n    refreshData,\n  };\n};\n","import React from 'react';\nimport {\n  Text,\n  Link,\n  HStack,\n  Center,\n  Heading,\n  Switch,\n  useColorMode,\n  NativeBaseProvider,\n  extendTheme,\n  VStack,\n  Code,\n} from 'native-base';\nimport { SpotifySongInfo } from './spotify-song-info';\n\n// Define the config\nconst config = {\n  useSystemColorMode: false,\n  initialColorMode: 'dark',\n};\n\n// extend the theme\nexport const theme = extendTheme({ config });\n\nexport const AppMain = ({ accessToken }: { accessToken: string }) => {\n  return (\n    <NativeBaseProvider>\n      <Center\n        _dark={{ bg: 'blueGray.900' }}\n        _light={{ bg: 'blueGray.50' }}\n        px={4}\n        flex={1}\n      >\n        <VStack space={5} alignItems=\"center\">\n          <SpotifySongInfo accessToken={accessToken} />\n        </VStack>\n      </Center>\n    </NativeBaseProvider>\n  );\n};\n\n// // Color Switch Component\n// function ToggleDarkMode() {\n//   const { colorMode, toggleColorMode } = useColorMode();\n//   return (\n//     <HStack space={2} alignItems=\"center\">\n//       <Text>Dark</Text>\n//       <Switch\n//         isChecked={colorMode === 'light' ? true : false}\n//         onToggle={toggleColorMode}\n//         aria-label={\n//           colorMode === 'light' ? 'switch to dark mode' : 'switch to light mode'\n//         }\n//       />\n//       <Text>Light</Text>\n//     </HStack>\n//   );\n// }\n","import { useEffect } from 'react';\nimport { APP_URL } from '../../constants';\n\nconst client_id = '500ff9e9af7042d0b81606887981a1a5';\n\nconst requiredScopes = 'user-read-currently-playing';\n\nconst buildAuthUrl = () => {\n  return (\n    'https://accounts.spotify.com/authorize' +\n    '?response_type=token' +\n    '&client_id=' +\n    encodeURIComponent(client_id) +\n    '&scope=' +\n    encodeURIComponent(requiredScopes) +\n    '&redirect_uri=' +\n    encodeURIComponent(APP_URL)\n  );\n};\n\nexport const SpotifyAuth = () => {\n  useEffect(() => {\n    window.location.replace(buildAuthUrl());\n  }, []);\n\n  return null;\n};\n","import React from 'react';\nimport { AppMain } from './src/ui';\nimport { SpotifyAuth } from './src/ui/spotify-auth';\n\nconst getSpotifyAccessTokenFromUrl = () => {\n  const parsedHash = new URLSearchParams(\n    window.location.hash.substr(1), // skip the first char (#)\n  );\n  return parsedHash.get('access_token');\n};\n\nconst AppEntry = () => {\n  const spotifyAccessToken = getSpotifyAccessTokenFromUrl();\n\n  return spotifyAccessToken ? (\n    <AppMain accessToken={spotifyAccessToken} />\n  ) : (\n    <SpotifyAuth />\n  );\n};\n\nexport default AppEntry;\n"],"sourceRoot":""}